/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.itorii.kafka.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TemperatureRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1483563103569481483L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TemperatureRecord\",\"namespace\":\"com.itorii.kafka.schema\",\"fields\":[{\"name\":\"deviceId\",\"type\":\"string\"},{\"name\":\"temperature\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TemperatureRecord> ENCODER =
      new BinaryMessageEncoder<TemperatureRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TemperatureRecord> DECODER =
      new BinaryMessageDecoder<TemperatureRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TemperatureRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TemperatureRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TemperatureRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TemperatureRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TemperatureRecord from a ByteBuffer. */
  public static TemperatureRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence deviceId;
  @Deprecated public java.lang.CharSequence temperature;
  @Deprecated public java.lang.CharSequence timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TemperatureRecord() {}

  /**
   * All-args constructor.
   * @param deviceId The new value for deviceId
   * @param temperature The new value for temperature
   * @param timestamp The new value for timestamp
   */
  public TemperatureRecord(java.lang.CharSequence deviceId, java.lang.CharSequence temperature, java.lang.CharSequence timestamp) {
    this.deviceId = deviceId;
    this.temperature = temperature;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return deviceId;
    case 1: return temperature;
    case 2: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: deviceId = (java.lang.CharSequence)value$; break;
    case 1: temperature = (java.lang.CharSequence)value$; break;
    case 2: timestamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'deviceId' field.
   * @return The value of the 'deviceId' field.
   */
  public java.lang.CharSequence getDeviceId() {
    return deviceId;
  }

  /**
   * Sets the value of the 'deviceId' field.
   * @param value the value to set.
   */
  public void setDeviceId(java.lang.CharSequence value) {
    this.deviceId = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The value of the 'temperature' field.
   */
  public java.lang.CharSequence getTemperature() {
    return temperature;
  }

  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(java.lang.CharSequence value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Creates a new TemperatureRecord RecordBuilder.
   * @return A new TemperatureRecord RecordBuilder
   */
  public static com.itorii.kafka.schema.TemperatureRecord.Builder newBuilder() {
    return new com.itorii.kafka.schema.TemperatureRecord.Builder();
  }

  /**
   * Creates a new TemperatureRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TemperatureRecord RecordBuilder
   */
  public static com.itorii.kafka.schema.TemperatureRecord.Builder newBuilder(com.itorii.kafka.schema.TemperatureRecord.Builder other) {
    return new com.itorii.kafka.schema.TemperatureRecord.Builder(other);
  }

  /**
   * Creates a new TemperatureRecord RecordBuilder by copying an existing TemperatureRecord instance.
   * @param other The existing instance to copy.
   * @return A new TemperatureRecord RecordBuilder
   */
  public static com.itorii.kafka.schema.TemperatureRecord.Builder newBuilder(com.itorii.kafka.schema.TemperatureRecord other) {
    return new com.itorii.kafka.schema.TemperatureRecord.Builder(other);
  }

  /**
   * RecordBuilder for TemperatureRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TemperatureRecord>
    implements org.apache.avro.data.RecordBuilder<TemperatureRecord> {

    private java.lang.CharSequence deviceId;
    private java.lang.CharSequence temperature;
    private java.lang.CharSequence timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.itorii.kafka.schema.TemperatureRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.deviceId)) {
        this.deviceId = data().deepCopy(fields()[0].schema(), other.deviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TemperatureRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.itorii.kafka.schema.TemperatureRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.deviceId)) {
        this.deviceId = data().deepCopy(fields()[0].schema(), other.deviceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'deviceId' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeviceId() {
      return deviceId;
    }

    /**
      * Sets the value of the 'deviceId' field.
      * @param value The value of 'deviceId'.
      * @return This builder.
      */
    public com.itorii.kafka.schema.TemperatureRecord.Builder setDeviceId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.deviceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceId' field has been set.
      * @return True if the 'deviceId' field has been set, false otherwise.
      */
    public boolean hasDeviceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'deviceId' field.
      * @return This builder.
      */
    public com.itorii.kafka.schema.TemperatureRecord.Builder clearDeviceId() {
      deviceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * @return The value.
      */
    public java.lang.CharSequence getTemperature() {
      return temperature;
    }

    /**
      * Sets the value of the 'temperature' field.
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public com.itorii.kafka.schema.TemperatureRecord.Builder setTemperature(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.temperature = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'temperature' field.
      * @return This builder.
      */
    public com.itorii.kafka.schema.TemperatureRecord.Builder clearTemperature() {
      temperature = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.itorii.kafka.schema.TemperatureRecord.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.itorii.kafka.schema.TemperatureRecord.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TemperatureRecord build() {
      try {
        TemperatureRecord record = new TemperatureRecord();
        record.deviceId = fieldSetFlags()[0] ? this.deviceId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.temperature = fieldSetFlags()[1] ? this.temperature : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TemperatureRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<TemperatureRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TemperatureRecord>
    READER$ = (org.apache.avro.io.DatumReader<TemperatureRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
